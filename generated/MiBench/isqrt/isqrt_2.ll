; ModuleID = 'outputs/basicmath/isqrt_2.c'
source_filename = "outputs/basicmath/isqrt_2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) uwtable
define dso_local void @usqrt(i64 noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #0 {
  %3 = lshr i64 %0, 30
  %4 = and i64 %3, 3
  %5 = icmp ne i64 %4, 0
  %6 = sext i1 %5 to i64
  %7 = add nsw i64 %4, %6
  %8 = icmp eq i64 %7, 0
  %9 = shl nsw i64 %7, 2
  %10 = lshr i64 %0, 28
  %11 = and i64 %10, 3
  %12 = or disjoint i64 %9, %11
  %13 = select i1 %8, i64 0, i64 2
  %14 = select i1 %8, i64 0, i64 4
  %15 = xor i64 %14, -1
  %16 = icmp ugt i64 %12, %14
  %17 = select i1 %16, i64 %15, i64 0
  %18 = add nsw i64 %17, %12
  %19 = icmp ugt i64 %18, %14
  %20 = zext i1 %19 to i64
  %21 = or disjoint i64 %13, %20
  %22 = shl nsw i64 %18, 2
  %23 = lshr i64 %0, 26
  %24 = and i64 %23, 3
  %25 = or disjoint i64 %22, %24
  %26 = shl nuw nsw i64 %21, 1
  %27 = shl nuw nsw i64 %21, 2
  %28 = xor i64 %27, -1
  %29 = icmp ugt i64 %25, %27
  %30 = select i1 %29, i64 %28, i64 0
  %31 = add i64 %30, %25
  %32 = icmp ugt i64 %31, %27
  %33 = zext i1 %32 to i64
  %34 = or disjoint i64 %26, %33
  %35 = shl i64 %31, 2
  %36 = lshr i64 %0, 24
  %37 = and i64 %36, 3
  %38 = or disjoint i64 %35, %37
  %39 = shl nuw nsw i64 %34, 1
  %40 = shl nuw nsw i64 %34, 2
  %41 = xor i64 %40, -1
  %42 = icmp ugt i64 %38, %40
  %43 = select i1 %42, i64 %41, i64 0
  %44 = add i64 %43, %38
  %45 = icmp ugt i64 %44, %40
  %46 = zext i1 %45 to i64
  %47 = or disjoint i64 %39, %46
  %48 = shl i64 %44, 2
  %49 = lshr i64 %0, 22
  %50 = and i64 %49, 3
  %51 = or disjoint i64 %48, %50
  %52 = shl nuw nsw i64 %47, 1
  %53 = shl nuw nsw i64 %47, 2
  %54 = xor i64 %53, -1
  %55 = icmp ugt i64 %51, %53
  %56 = select i1 %55, i64 %54, i64 0
  %57 = add i64 %56, %51
  %58 = icmp ugt i64 %57, %53
  %59 = zext i1 %58 to i64
  %60 = or disjoint i64 %52, %59
  %61 = shl i64 %57, 2
  %62 = lshr i64 %0, 20
  %63 = and i64 %62, 3
  %64 = or disjoint i64 %61, %63
  %65 = shl nuw nsw i64 %60, 1
  %66 = shl nuw nsw i64 %60, 2
  %67 = xor i64 %66, -1
  %68 = icmp ugt i64 %64, %66
  %69 = select i1 %68, i64 %67, i64 0
  %70 = add i64 %69, %64
  %71 = icmp ugt i64 %70, %66
  %72 = zext i1 %71 to i64
  %73 = or disjoint i64 %65, %72
  %74 = shl i64 %70, 2
  %75 = lshr i64 %0, 18
  %76 = and i64 %75, 3
  %77 = or disjoint i64 %74, %76
  %78 = shl nuw nsw i64 %73, 1
  %79 = shl nuw nsw i64 %73, 2
  %80 = xor i64 %79, -1
  %81 = icmp ugt i64 %77, %79
  %82 = select i1 %81, i64 %80, i64 0
  %83 = add i64 %82, %77
  %84 = icmp ugt i64 %83, %79
  %85 = zext i1 %84 to i64
  %86 = or disjoint i64 %78, %85
  %87 = shl i64 %83, 2
  %88 = lshr i64 %0, 16
  %89 = and i64 %88, 3
  %90 = or disjoint i64 %87, %89
  %91 = shl nuw nsw i64 %86, 1
  %92 = shl nuw nsw i64 %86, 2
  %93 = xor i64 %92, -1
  %94 = icmp ugt i64 %90, %92
  %95 = select i1 %94, i64 %93, i64 0
  %96 = add i64 %95, %90
  %97 = icmp ugt i64 %96, %92
  %98 = zext i1 %97 to i64
  %99 = or disjoint i64 %91, %98
  %100 = shl i64 %96, 2
  %101 = lshr i64 %0, 14
  %102 = and i64 %101, 3
  %103 = or disjoint i64 %100, %102
  %104 = shl nuw nsw i64 %99, 1
  %105 = shl nuw nsw i64 %99, 2
  %106 = xor i64 %105, -1
  %107 = icmp ugt i64 %103, %105
  %108 = select i1 %107, i64 %106, i64 0
  %109 = add i64 %108, %103
  %110 = icmp ugt i64 %109, %105
  %111 = zext i1 %110 to i64
  %112 = or disjoint i64 %104, %111
  %113 = shl i64 %109, 2
  %114 = lshr i64 %0, 12
  %115 = and i64 %114, 3
  %116 = or disjoint i64 %113, %115
  %117 = shl nuw nsw i64 %112, 1
  %118 = shl nuw nsw i64 %112, 2
  %119 = xor i64 %118, -1
  %120 = icmp ugt i64 %116, %118
  %121 = select i1 %120, i64 %119, i64 0
  %122 = add i64 %121, %116
  %123 = icmp ugt i64 %122, %118
  %124 = zext i1 %123 to i64
  %125 = or disjoint i64 %117, %124
  %126 = shl i64 %122, 2
  %127 = lshr i64 %0, 10
  %128 = and i64 %127, 3
  %129 = or disjoint i64 %126, %128
  %130 = shl nuw nsw i64 %125, 1
  %131 = shl nuw nsw i64 %125, 2
  %132 = xor i64 %131, -1
  %133 = icmp ugt i64 %129, %131
  %134 = select i1 %133, i64 %132, i64 0
  %135 = add i64 %134, %129
  %136 = icmp ugt i64 %135, %131
  %137 = zext i1 %136 to i64
  %138 = or disjoint i64 %130, %137
  %139 = shl i64 %135, 2
  %140 = lshr i64 %0, 8
  %141 = and i64 %140, 3
  %142 = or disjoint i64 %139, %141
  %143 = shl nuw nsw i64 %138, 1
  %144 = shl nuw nsw i64 %138, 2
  %145 = xor i64 %144, -1
  %146 = icmp ugt i64 %142, %144
  %147 = select i1 %146, i64 %145, i64 0
  %148 = add i64 %147, %142
  %149 = icmp ugt i64 %148, %144
  %150 = zext i1 %149 to i64
  %151 = or disjoint i64 %143, %150
  %152 = shl i64 %148, 2
  %153 = lshr i64 %0, 6
  %154 = and i64 %153, 3
  %155 = or disjoint i64 %152, %154
  %156 = shl nuw nsw i64 %151, 1
  %157 = shl nuw nsw i64 %151, 2
  %158 = xor i64 %157, -1
  %159 = icmp ugt i64 %155, %157
  %160 = select i1 %159, i64 %158, i64 0
  %161 = add i64 %160, %155
  %162 = icmp ugt i64 %161, %157
  %163 = zext i1 %162 to i64
  %164 = or disjoint i64 %156, %163
  %165 = shl i64 %161, 2
  %166 = lshr i64 %0, 4
  %167 = and i64 %166, 3
  %168 = or disjoint i64 %165, %167
  %169 = shl nuw nsw i64 %164, 1
  %170 = shl nuw nsw i64 %164, 2
  %171 = xor i64 %170, -1
  %172 = icmp ugt i64 %168, %170
  %173 = select i1 %172, i64 %171, i64 0
  %174 = add i64 %173, %168
  %175 = icmp ugt i64 %174, %170
  %176 = zext i1 %175 to i64
  %177 = or disjoint i64 %169, %176
  %178 = shl i64 %174, 2
  %179 = lshr i64 %0, 2
  %180 = and i64 %179, 3
  %181 = or disjoint i64 %178, %180
  %182 = shl nuw nsw i64 %177, 1
  %183 = shl nuw nsw i64 %177, 2
  %184 = xor i64 %183, -1
  %185 = icmp ugt i64 %181, %183
  %186 = select i1 %185, i64 %184, i64 0
  %187 = add i64 %186, %181
  %188 = icmp ugt i64 %187, %183
  %189 = zext i1 %188 to i64
  %190 = or disjoint i64 %182, %189
  %191 = shl i64 %187, 2
  %192 = and i64 %0, 3
  %193 = or disjoint i64 %191, %192
  %194 = shl nuw nsw i64 %190, 1
  %195 = shl nuw nsw i64 %190, 2
  %196 = xor i64 %195, -1
  %197 = icmp ugt i64 %193, %195
  %198 = select i1 %197, i64 %196, i64 0
  %199 = add i64 %198, %193
  %200 = icmp ugt i64 %199, %195
  %201 = zext i1 %200 to i64
  %202 = or disjoint i64 %194, %201
  store i64 %202, ptr %1, align 4
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
