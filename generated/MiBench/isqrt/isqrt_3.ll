; ModuleID = 'outputs/basicmath/isqrt_3.c'
source_filename = "outputs/basicmath/isqrt_3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) uwtable
define dso_local void @usqrt(i64 noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #0 {
  %3 = lshr i64 %0, 30
  %4 = and i64 %3, 3
  %5 = icmp ne i64 %4, 0
  %6 = sext i1 %5 to i64
  %7 = add nsw i64 %4, %6
  %8 = icmp eq i64 %7, 0
  %9 = shl nsw i64 %7, 2
  %10 = lshr i64 %0, 28
  %11 = and i64 %10, 3
  %12 = or disjoint i64 %9, %11
  %13 = shl i64 %0, 4
  %14 = select i1 %8, i64 0, i64 2
  %15 = shl nuw nsw i64 %14, 1
  %16 = xor i64 %15, -1
  %17 = icmp ugt i64 %12, %15
  %18 = select i1 %17, i64 %16, i64 0
  %19 = add nsw i64 %18, %12
  %20 = icmp ugt i64 %19, %15
  %21 = zext i1 %20 to i64
  %22 = or disjoint i64 %14, %21
  %23 = shl nsw i64 %19, 2
  %24 = lshr i64 %13, 30
  %25 = and i64 %24, 3
  %26 = or disjoint i64 %23, %25
  %27 = shl nuw nsw i64 %22, 2
  %28 = xor i64 %27, -1
  %29 = icmp ugt i64 %26, %27
  %30 = select i1 %29, i64 %28, i64 0
  %31 = add i64 %30, %26
  %32 = icmp ugt i64 %31, %27
  %33 = shl i64 %31, 2
  %34 = lshr i64 %13, 28
  %35 = and i64 %34, 3
  %36 = or disjoint i64 %33, %35
  %37 = shl i64 %0, 8
  %38 = select i1 %32, i64 2, i64 0
  %39 = or disjoint i64 %38, %27
  %40 = shl nuw nsw i64 %39, 1
  %41 = xor i64 %40, -1
  %42 = icmp ugt i64 %36, %40
  %43 = select i1 %42, i64 %41, i64 0
  %44 = add i64 %43, %36
  %45 = icmp ugt i64 %44, %40
  %46 = zext i1 %45 to i64
  %47 = or disjoint i64 %39, %46
  %48 = shl i64 %44, 2
  %49 = lshr i64 %37, 30
  %50 = and i64 %49, 3
  %51 = or disjoint i64 %48, %50
  %52 = shl nuw nsw i64 %47, 2
  %53 = xor i64 %52, -1
  %54 = icmp ugt i64 %51, %52
  %55 = select i1 %54, i64 %53, i64 0
  %56 = add i64 %55, %51
  %57 = icmp ugt i64 %56, %52
  %58 = shl i64 %56, 2
  %59 = lshr i64 %37, 28
  %60 = and i64 %59, 3
  %61 = or disjoint i64 %58, %60
  %62 = shl i64 %0, 12
  %63 = select i1 %57, i64 2, i64 0
  %64 = or disjoint i64 %63, %52
  %65 = shl nuw nsw i64 %64, 1
  %66 = xor i64 %65, -1
  %67 = icmp ugt i64 %61, %65
  %68 = select i1 %67, i64 %66, i64 0
  %69 = add i64 %68, %61
  %70 = icmp ugt i64 %69, %65
  %71 = zext i1 %70 to i64
  %72 = or disjoint i64 %64, %71
  %73 = shl i64 %69, 2
  %74 = lshr i64 %62, 30
  %75 = and i64 %74, 3
  %76 = or disjoint i64 %73, %75
  %77 = shl nuw nsw i64 %72, 2
  %78 = xor i64 %77, -1
  %79 = icmp ugt i64 %76, %77
  %80 = select i1 %79, i64 %78, i64 0
  %81 = add i64 %80, %76
  %82 = icmp ugt i64 %81, %77
  %83 = shl i64 %81, 2
  %84 = lshr i64 %62, 28
  %85 = and i64 %84, 3
  %86 = or disjoint i64 %83, %85
  %87 = shl i64 %0, 16
  %88 = select i1 %82, i64 2, i64 0
  %89 = or disjoint i64 %88, %77
  %90 = shl nuw nsw i64 %89, 1
  %91 = xor i64 %90, -1
  %92 = icmp ugt i64 %86, %90
  %93 = select i1 %92, i64 %91, i64 0
  %94 = add i64 %93, %86
  %95 = icmp ugt i64 %94, %90
  %96 = zext i1 %95 to i64
  %97 = or disjoint i64 %89, %96
  %98 = shl i64 %94, 2
  %99 = lshr i64 %87, 30
  %100 = and i64 %99, 3
  %101 = or disjoint i64 %98, %100
  %102 = shl nuw nsw i64 %97, 2
  %103 = xor i64 %102, -1
  %104 = icmp ugt i64 %101, %102
  %105 = select i1 %104, i64 %103, i64 0
  %106 = add i64 %105, %101
  %107 = icmp ugt i64 %106, %102
  %108 = shl i64 %106, 2
  %109 = lshr i64 %87, 28
  %110 = and i64 %109, 3
  %111 = or disjoint i64 %108, %110
  %112 = shl i64 %0, 20
  %113 = select i1 %107, i64 2, i64 0
  %114 = or disjoint i64 %113, %102
  %115 = shl nuw nsw i64 %114, 1
  %116 = xor i64 %115, -1
  %117 = icmp ugt i64 %111, %115
  %118 = select i1 %117, i64 %116, i64 0
  %119 = add i64 %118, %111
  %120 = icmp ugt i64 %119, %115
  %121 = zext i1 %120 to i64
  %122 = or disjoint i64 %114, %121
  %123 = shl i64 %119, 2
  %124 = lshr i64 %112, 30
  %125 = and i64 %124, 3
  %126 = or disjoint i64 %123, %125
  %127 = shl nuw nsw i64 %122, 2
  %128 = xor i64 %127, -1
  %129 = icmp ugt i64 %126, %127
  %130 = select i1 %129, i64 %128, i64 0
  %131 = add i64 %130, %126
  %132 = icmp ugt i64 %131, %127
  %133 = shl i64 %131, 2
  %134 = lshr i64 %112, 28
  %135 = and i64 %134, 3
  %136 = or disjoint i64 %133, %135
  %137 = shl i64 %0, 24
  %138 = select i1 %132, i64 2, i64 0
  %139 = or disjoint i64 %138, %127
  %140 = shl nuw nsw i64 %139, 1
  %141 = xor i64 %140, -1
  %142 = icmp ugt i64 %136, %140
  %143 = select i1 %142, i64 %141, i64 0
  %144 = add i64 %143, %136
  %145 = icmp ugt i64 %144, %140
  %146 = zext i1 %145 to i64
  %147 = or disjoint i64 %139, %146
  %148 = shl i64 %144, 2
  %149 = lshr i64 %137, 30
  %150 = and i64 %149, 3
  %151 = or disjoint i64 %148, %150
  %152 = shl nuw nsw i64 %147, 2
  %153 = xor i64 %152, -1
  %154 = icmp ugt i64 %151, %152
  %155 = select i1 %154, i64 %153, i64 0
  %156 = add i64 %155, %151
  %157 = icmp ugt i64 %156, %152
  %158 = shl i64 %156, 2
  %159 = lshr i64 %137, 28
  %160 = and i64 %159, 3
  %161 = or disjoint i64 %158, %160
  %162 = select i1 %157, i64 2, i64 0
  %163 = or disjoint i64 %162, %152
  %164 = shl nuw nsw i64 %163, 1
  %165 = xor i64 %164, -1
  %166 = icmp ugt i64 %161, %164
  %167 = select i1 %166, i64 %165, i64 0
  %168 = add i64 %167, %161
  %169 = icmp ugt i64 %168, %164
  %170 = zext i1 %169 to i64
  %171 = or disjoint i64 %163, %170
  %172 = shl i64 %168, 2
  %173 = lshr i64 %0, 2
  %174 = and i64 %173, 3
  %175 = or disjoint i64 %172, %174
  %176 = shl nuw nsw i64 %171, 2
  %177 = xor i64 %176, -1
  %178 = icmp ugt i64 %175, %176
  %179 = select i1 %178, i64 %177, i64 0
  %180 = add i64 %179, %175
  %181 = icmp ugt i64 %180, %176
  %182 = shl i64 %180, 2
  %183 = and i64 %0, 3
  %184 = or disjoint i64 %182, %183
  %185 = select i1 %181, i64 2, i64 0
  %186 = or disjoint i64 %185, %176
  %187 = shl nuw nsw i64 %186, 1
  %188 = xor i64 %187, -1
  %189 = icmp ugt i64 %184, %187
  %190 = select i1 %189, i64 %188, i64 0
  %191 = add i64 %190, %184
  %192 = icmp ugt i64 %191, %187
  %193 = zext i1 %192 to i64
  %194 = or disjoint i64 %186, %193
  store i64 %194, ptr %1, align 4
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
